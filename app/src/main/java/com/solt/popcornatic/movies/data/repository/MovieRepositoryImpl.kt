package com.solt.popcornatic.movies.data.repositoryimport android.util.Logimport com.solt.popcornatic.ApiResultimport com.solt.popcornatic.US_ENGLISHimport com.solt.popcornatic.movies.data.api.MovieApiImplimport com.solt.popcornatic.movies.data.model.TrendingApiResultimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.withContextimport retrofit2.HttpExceptionimport java.io.IOExceptionimport javax.inject.Injectclass MovieRepositoryImpl @Inject constructor(val movieApi:MovieApiImpl):MovieRepository {    override suspend fun getTrendingMovies(page: Int, language: String?): ApiResult {        return try {                val result = movieApi.getTrendingMovies(page, language?: US_ENGLISH)                 ApiResult.Success(result)            } catch (e: IOException) {                 ApiResult.Failure.ApiFailure(e)            } catch (e: HttpException) {                ApiResult.Failure.NetworkFailure(e)            }    }    override suspend fun getPopularMovies(page: Int, language: String?): ApiResult {        return try {            val result = movieApi.getPopularMovies(page, language?: US_ENGLISH)            ApiResult.Success(result)        } catch (e: IOException) {            ApiResult.Failure.ApiFailure(e)        } catch (e: HttpException) {            ApiResult.Failure.NetworkFailure(e)        }    }    override suspend fun getUpcomingMovies(page: Int, language: String?): ApiResult {        return try {            val result = movieApi.getUpcomingMovies(page, language?: US_ENGLISH)            ApiResult.Success(result)        } catch (e: IOException) {            ApiResult.Failure.ApiFailure(e)        } catch (e: HttpException) {            ApiResult.Failure.NetworkFailure(e)        }    }    override suspend fun getTopRatedMovies(page: Int, language: String?): ApiResult {        return try {            val result = movieApi.getTopRatedMovies(page, language?: US_ENGLISH)            ApiResult.Success(result)        } catch (e: IOException) {            ApiResult.Failure.ApiFailure(e)        } catch (e: HttpException) {            ApiResult.Failure.NetworkFailure(e)        }    }}